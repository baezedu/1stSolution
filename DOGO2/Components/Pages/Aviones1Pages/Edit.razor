@page "/aviones1s/edit"
@using Microsoft.EntityFrameworkCore
@using DOGO2.Model
@inject IDbContextFactory<DOGO2.Data.DOGO2Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Aviones1</h2>
<hr />
@if (Aviones1 is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Aviones1" OnValidSubmit="UpdateAviones1" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Aviones1.IdAvion" value="@Aviones1.IdAvion" />
                <div class="mb-3">
                    <label for="idtipoavion" class="form-label">IdTipoAvion:</label>
                    <InputNumber id="idtipoavion" @bind-Value="Aviones1.IdTipoAvion" class="form-control" />
                    <ValidationMessage For="() => Aviones1.IdTipoAvion" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="idcategoriaavion" class="form-label">IdCategoriaAvion:</label>
                    <InputNumber id="idcategoriaavion" @bind-Value="Aviones1.IdCategoriaAvion" class="form-control" />
                    <ValidationMessage For="() => Aviones1.IdCategoriaAvion" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="matricula" class="form-label">Matricula:</label>
                    <InputText id="matricula" @bind-Value="Aviones1.Matricula" class="form-control" />
                    <ValidationMessage For="() => Aviones1.Matricula" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="nombre" class="form-label">Nombre:</label>
                    <InputText id="nombre" @bind-Value="Aviones1.Nombre" class="form-control" />
                    <ValidationMessage For="() => Aviones1.Nombre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="modelo" class="form-label">Modelo:</label>
                    <InputText id="modelo" @bind-Value="Aviones1.Modelo" class="form-control" />
                    <ValidationMessage For="() => Aviones1.Modelo" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/aviones1s">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int IdAvion { get; set; }

    [SupplyParameterFromForm]
    private Aviones1? Aviones1 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Aviones1 ??= await context.Aviones1.FirstOrDefaultAsync(m => m.IdAvion == IdAvion);

        if (Aviones1 is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAviones1()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Aviones1!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!Aviones1Exists(Aviones1!.IdAvion))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/aviones1s");
    }

    private bool Aviones1Exists(int idavion)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Aviones1.Any(e => e.IdAvion == idavion);
    }
}
